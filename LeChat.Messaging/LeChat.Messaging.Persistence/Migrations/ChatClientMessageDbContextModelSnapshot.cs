// <auto-generated />
using System;
using LeChat.Messaging.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LeChat.Messaging.Persistence.Migrations
{
    [DbContext(typeof(ChatClientMessageDbContext))]
    partial class ChatClientMessageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ChatSession");
                });

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateSeen")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatSessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatSessionId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.Message", b =>
                {
                    b.HasOne("LeChat.Messaging.Domain.Entities.ChatSession", "ChatSession")
                        .WithMany("SessionMessageList")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeChat.Messaging.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatSession");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("LeChat.Messaging.Domain.Entities.ChatSession", null)
                        .WithMany("SessionParticipantsList")
                        .HasForeignKey("ChatSessionId");
                });

            modelBuilder.Entity("LeChat.Messaging.Domain.Entities.ChatSession", b =>
                {
                    b.Navigation("SessionMessageList");

                    b.Navigation("SessionParticipantsList");
                });
#pragma warning restore 612, 618
        }
    }
}
